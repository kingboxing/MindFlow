# FERePack/src/BasicFunc/__init__.py"""The `BasicFunc` module provides foundational classes and functions for setting up finite element simulations usingFEniCS. It includes tools for defining and managing boundaries, boundary conditions, finite elements, and initialconditions, which are essential components in computational simulations of partial differential equations.Modules and Classes-------------------- **Boundary**:    - `SetBoundary`: Class for defining and marking boundaries on a mesh. Used in Solve classes    - `SetBoundaryCondition`: Class for setting up Dirichlet boundary conditions on a function space. Used in Solve classes- **ElementFunc**:    - `TaylorHood`: Class representing the Taylor-Hood finite element for coupled velocity and pressure fields.    - `Decoupled`: Class for decoupled finite element spaces for velocity and pressure.    - `PoissonPR`: Class for finite elements used in solving the Poisson equation.- **InitialCondition**:    - `SetInitialCondition`: Class for setting initial conditions in simulations, with support for adding noise and handling parallel execution.Usage-----To utilize the `BasicFunc` module in your simulation workflow, you can import the necessary classes and set up your simulation components as follows:```pythonfrom FERePack.BasicFunc import SetBoundary, SetBoundaryConditionfrom FERePack.BasicFunc import TaylorHood, SetInitialConditionfrom dolfin import Mesh, Constant# Define the mesh and finite elementmesh = Mesh("mesh.xml")element = TaylorHood(mesh)# Initialize boundary definitionsboundary = SetBoundary(mesh, element)# Define and mark boundariesboundary.define(mark=1, name='inlet', locs='on_boundary and near(x[0], 0, tol)')boundary.define(mark=2, name='outlet', locs='on_boundary and near(x[0], 1, tol)')boundary.Symmetry(mark=1, norm=(0, 1))boundary.VelocityInlet(mark=2, vel=(1.0, 0.0))boundary.set_boundary(bc_list[key]['location'], key)# Set boundary conditionsbc = SetBoundaryCondition(element.functionspace, boundary)bc.set_boundarycondition({'FunctionSpace': 'V', 'Value': Constant((1.0, 0.0))}, mark=1)  # Inlet velocitybc.set_boundarycondition({'FunctionSpace': 'V', 'Value': Constant((0.0, 0.0))}, mark=2)  # Outlet velocity# Set initial conditions with optional noiseic = SetInitialCondition(flag=1, ic='path/to/initial_condition', fw=element.w, noise=0.01)```Notes------ **Dependencies**: Ensure that the Deps module and FEniCS are correctly installed and configured in your environment.Mesh Compatibility: The mesh used should be compatible with the finite elements defined.- **Noise Addition**: When adding noise to initial conditions, ensure that the noise level is appropriate for your simulation.- **Parallel Execution**: The SetInitialCondition class supports parallel execution for IPCS solvers; make sure to provide the necessary mesh and element objects.Documentation-----Detailed documentation for each class and method can be found in their respective modules:- Boundary.py: Contains the SetBoundary and SetBoundaryCondition classes for boundary management.- ElementFunc.py: Contains the TaylorHood, Decoupled, and PoissonPR finite element classes.- InitialCondition.py: Contains the SetInitialCondition class for initializing simulation states.These modules provide comprehensive docstrings and examples to help you integrate them into your simulation projects."""from .Boundary import SetBoundary, SetBoundaryConditionfrom .ElementFunc import TaylorHood, Decoupled, PoissonPRfrom .InitialCondition import SetInitialCondition