# FERePack/src/NSolver/__init__.py"""The `NSolver` subpackage provides solvers for nonlinear, steady-state, and transient Navier-Stokes equations,particularly for incompressible fluid flow simulations using the finite element method with the FEniCS library.It includes base classes and implementations for steady and unsteady solvers, with capabilities to handle variousboundary conditions, initial conditions, and physical parameters like the Reynolds number.Modules and Classes-------------------- **SolverBase**:    - Contains the base class `NSolverBase` which provides common functionalities for Navier-Stokes solvers.    - **Classes**:        - `NSolverBase`: Base class for solving Navier-Stokes equations in FEniCS.- **SteadySolver**:    - Implements steady-state solvers for the Navier-Stokes equations.    - **Classes**:        - `NewtonSolver`: Solver for steady Navier-Stokes equations using the Newton-Raphson method.- **TransiSolver**:    - Implements transient (time-dependent) solvers for the Navier-Stokes equations.    - **Classes**:        - `DNS_Newton`: Solver for transient Navier-Stokes equations using the Newton-Raphson method.        - `DNS_IPCS`: Solver for transient Navier-Stokes equations using the Implicit Pressure Correction Scheme (IPCS).Usage-----To utilize the solvers provided by the `NSolver` subpackage, you can import the necessary classes as follows:```pythonfrom FERePack.NSolver.SteadySolver import NewtonSolverfrom FERePack.NSolver.TransiSolver import DNS_Newton, DNS_IPCS```Notes------ **Dependencies**: Ensure that FEniCS and other required dependencies are installed and properly configured.- **Finite Element Spaces**: The solvers use finite element spaces appropriate for fluid dynamics problems, such as Taylor-Hood and decoupled elements.- **Customization**: The solvers can be customized by providing different boundary conditions, source terms, time step sizes, and solver parameters.Examples-----Example of solving a steady-state incompressible flow problem using NewtonSolver:```pythonfrom FERePack.NSolver.SteadySolver import NewtonSolver# Define mesh and parametersmesh = ...Re = 100.0const_expr = ...# Initialize the solversolver = NewtonSolver(mesh, Re=Re, const_expr=const_expr, order=(2, 1), dim=2)# Set boundary conditionssolver.set_boundary(bc_list)solver.set_boundarycondition(bc_list)# Solve the steady Navier-Stokes equationssolver.solve()# Retrieve the solutionu, p = solver.flow.split()```Example of solving a transient incompressible flow problem using DNS_Newton:```pythonfrom FERePack.NSolver.TransiSolver import DNS_Newton# Define mesh and parametersmesh = ...Re = 100.0dt = 0.01const_expr = ...time_expr = ...# Initialize the solversolver = DNS_Newton(mesh, Re=Re, dt=dt, const_expr=const_expr, time_expr=time_expr, order=(2, 1), dim=2)# Set boundary conditionssolver.set_boundary(bc_list)solver.set_boundarycondition(bc_list)# Set initial conditionsolver.initial(ic=initial_condition)# Time-stepping loopfor t in time_steps:    solver.solve()    # Optionally, evaluate vorticity or forces    vorticity = solver.eval_vorticity()    force = solver.eval_force(mark=boundary_mark, dirc=0)```Example of solving a transient incompressible flow problem using DNS_IPCS:```pythonfrom FERePack.NSolver.TransiSolver import DNS_IPCS# Define mesh and parametersmesh = ...Re = 100.0dt = 0.01const_expr = ...time_expr = ...# Initialize the solversolver = DNS_IPCS(mesh, Re=Re, dt=dt, const_expr=const_expr, time_expr=time_expr, order=(2, 1), dim=2)# Set boundary conditionssolver.set_boundary(bc_list)solver.set_boundarycondition(bc_list)# Set initial conditionsolver.initial(ic=initial_condition)# Time-stepping loopfor t in time_steps:    solver.solve()    # Optionally, evaluate vorticity or forces    vorticity = solver.eval_vorticity()    force = solver.eval_force(mark=boundary_mark, dirc=0)```In these examples:- We create instances of the solvers with the mesh and physical parameters.- Set the boundary conditions using set_boundary and set_boundarycondition.- Set the initial condition using initial.- Solve the Navier-Stokes equations using the solve method in a time-stepping loop for transient solvers.- Retrieve the velocity and pressure fields from the solution."""from .SteadySolver import *from .TransiSolver import *from .SolverBase import *